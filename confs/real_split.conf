general {
    base_exp_dir = ./exp/CASE_NAME/real_split
    recording = [
        ./,
        ./models,
        ./models/LieAlgebra,
    ]
}

dataset {
    data_dir = ../fullface_data/CASE_NAME/
	mask_dir = newmask
    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz

    # Camera
    is_monocular = True # if the camera setting is monocular, set True
    camera_trainable = False

    # Resize
    img_downscale = 1

    # Gaze DA
    use_gazeDA = True
    use_disentangle = True

    use_exclude = False

    # Gaze
    use_gaze = True
    use_split = True
    gaze_name = parameters_mergesplit_new.npz
    # Eyeball Sample Points
    use_eyeball = True
    eyeball_name = sample_points_merge.npz
    eyeball_scale = 1.0
    eyeball_mode = both     # [both, up, down]
}

train {
    random_seed = 6033
    learning_rate = 5e-4
    learning_rate_alpha = 0.05
    end_iter = 120000
    batch_size = 1024
    validate_resolution_level = 2
    warm_up_end = 5000
    anneal_end = 0
    igr_weight = 0.1
    mask_weight = 0.1
    normal_penalty_weight = 1e-5
    esp_weight = 0.01
    disentangle_weight = 0.5
    # Deform
    use_deform = True
    use_closing = False
    # Anneal. Coarse-to-Fine Optimization.
    max_pe_iter = 70000

    save_freq = 10000
    val_freq = 10000
    val_mesh_freq = 10000
    report_freq = 10000

    validate_idx = -1 # index of validation
}

test {
    test_batch_size = 1024
}

model {
    gazedeform_network {
        d_in = 2
        d_out = 48
        d_hidden = 32
        n_layers = 4
        d_variance = 32
        gaze_encoder {
            type = frequency
            input_dim = 2
            freq = 4
        }
        weight_norm = True
    }

    # Deform
    deform_network {
        d_feature = 64
        d_in = 3
        d_out_1 = 1 # t
        d_out_2 = 3 # (r,t) in 2d
        n_blocks = 3
        d_hidden = 128
        n_layers = 1
        skip_in = []
        amb_encoder {
            type = frequency
            input_dim = 3
            freq = 6
        }
        weight_norm = True
    }

    # Deform
    topo_network {
        d_feature = 64
        d_in = 3
        d_out = 2
        d_hidden = 64
        n_layers = 7
        skip_in = [5]
        amb_encoder {
            type = frequency
            input_dim = 3
            freq = 6
        }
        bias = 0.0
        weight_norm = True
    }

    sdf_network {
        d_out = 257
        d_in_1 = 3
        d_in_2 = 2
        d_hidden = 256
        n_layers = 3
        skip_in = []
        xyz_encoder {
            type = deformable_anchor_grid
            input_dim = 3
            n_levels = 8
            base_resolution = 16
            n_features_per_level = 6
            desired_resolution = -1
            b = 1.38
            bbox = [-1.01, -1.01, -1.01, 1.01, 1.01, 1.01]
        }
        amb_encoder {
            type = frequency
            input_dim = 2
            freq = 1
        }
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 256
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        dir_encoder {
	        type = frequency
            input_dim = 3
            freq = 4
        }
        squeeze_out = True
    }

    # Deform
    appearance_rendering_network {
        d_feature = 256
        d_global_feature = 64
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 1
        weight_norm = False
        xyz_encoder {
            type = frequency
            input_dim = 3
            freq = 4
        }
        dir_encoder {
	        type = frequency
            input_dim = 3
            freq = 4
        }
        squeeze_out = True
    }

    neus_renderer {
        begin_n_samples = 64
        end_n_samples = 16
        important_begin_iter = 40000
        n_importance = 64
        up_sample_steps = 4
        perturb = 1.0
    }
}
